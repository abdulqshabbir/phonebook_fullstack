{"version":3,"sources":["components/Person.js","helperFunctions/isPhonebookMatch.js","helperFunctions/filteredContacts.js","components/AddPersonForm.js","httpMethods/personHttpMethods.js","components/Notification.js","index.js"],"names":["Person","_ref","person","handlePersonDeletion","react_default","a","createElement","className","key","name","number","onClick","isPhonebookMatch","searchQuery","toLowerCase","i","length","charAt","FilteredContacts","persons","map","components_Person","AddPersonForm","addNewPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","value","onChange","placeholder","BASE_URL","personHttpMethods","axios","get","then","response","data","newPerson","post","concat","personToDelete","delete","id","personToUpdate","put","Notification","notification","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setNewName","_useState3","_useState4","setNewNumber","_useState5","_useState6","setSearchQuery","_useState7","_useState8","setPersons","_useState9","_useState10","setNotification","useEffect","personHttp","people","handleNotificationUpdate","objectSpread","setTimeout","clearInputFields","src_components_Notification","event","target","components_AddPersonForm","preventDefault","MESSAGE","duplicatePerson","filter","replaceContact","window","confirm","matchingPerson","updatedPerson","catch","error","p","toConsumableArray","console","log","filteredContacts","document","getElementById"],"mappings":"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","file":"static/js/main.13a92dec.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, handlePersonDeletion }) => {\n    return(\n        <div>\n            <li className=\"person\" key={person.name}> \n                {person.name} : {person.number} \n            </li>\n            <button onClick={handlePersonDeletion}>\n                    Delete Contact\n            </button>\n        </div>\n    )\n\n}\n\nexport default Person","const isPhonebookMatch = (name, searchQuery) => {\n    name = name.toLowerCase()\n    searchQuery = searchQuery.toLowerCase()\n\n    for (let i = 0; i < searchQuery.length; i++) {\n        if (searchQuery.charAt(i) === name.charAt(i)) {\n            // corresponding characters match!\n        } \n        else {\n            // corresponding characters don't match!\n            return false\n        }\n    }\n    return true\n}\n\nexport default isPhonebookMatch","import React from 'react'\nimport Person from '../components/Person'\nimport isPhonebookMatch from './isPhonebookMatch'\n\nconst FilteredContacts = ({persons, searchQuery, handlePersonDeletion}) => {\n    return(\n        persons.map((person) => {\n            if (searchQuery) {\n                if (isPhonebookMatch(person.name, searchQuery)) {\n                    return(\n                        <Person \n                            key={person.name}\n                            person={person}\n                            handlePersonDeletion={() => handlePersonDeletion(person)}\n                        />\n                    )\n                } else {\n                        return undefined\n                }\n            }\n            else {\n            // no search in progress\n                return(\n                    < Person \n                        key={person.name}\n                        person={person}\n                        handlePersonDeletion= {() => handlePersonDeletion(person)} \n                    />)\n            }\n        })\n    )\n}\n    \nexport default FilteredContacts","import React from 'react'\n\nconst AddPersonForm = (\n    {\n        addNewPerson,\n        newName,\n        handleNameChange,\n        newNumber,\n        handleNumberChange,\n    }\n    ) => (\n    \n    <form onSubmit={addNewPerson}>\n        <div>\n            Name: \n            <input \n                type=\"text\"\n                value={newName}\n                onChange={handleNameChange} \n                placeholder=\"Type name here...\"\n            />\n        </div>\n        <div>\n            Number: \n            <input \n                type=\"text\"\n                value={newNumber}\n                onChange={handleNumberChange}\n                placeholder=\"Type phone number here...\"\n            />\n        </div>\n        <div>\n            <button type=\"submit\">\n                    add\n            </button>\n        </div>\n    </form>\n)\n\nexport default AddPersonForm\n","import axios from 'axios'\n\nconst BASE_URL = 'http://localhost:3001/persons'\n\nconst getAllPeople = () => {\n    const request = axios.get(BASE_URL)\n    return request.then(response => response.data)\n}\n\nconst createPerson = (newPerson) => {\n    const request = axios.post(`${BASE_URL}`, newPerson)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = (personToDelete) => {\n    const request = axios.delete(`${BASE_URL}/${personToDelete.id}`)\n    return request.then(response => response.data)\n}\n\nconst updatePerson = (personToUpdate) => {\n    const request = axios.put(`${BASE_URL}/${personToUpdate.id}`, personToUpdate)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAllPeople: getAllPeople,\n    createPerson: createPerson,\n    deletePerson: deletePerson,\n    updatePerson: updatePerson\n}","import React from 'react'\nimport './Notification.css'\n\nconst Notification = ({ notification }) => {\n\n    if (notification.type === 'NEW_PERSON') {\n        return(\n            <div className=\"notification add\" >\n                {`${notification.data.name} was just added!`}\n            </div>\n        )\n    } else if (notification.type === 'DELETE_PERSON') {\n        return(\n            <div className=\"notification delete\" >\n                {`${notification.data.name} was just deleted.`}\n            </div>\n        )\n    } else if (notification.type === 'UPDATE_PERSON') {\n        return(\n            <div className=\"notification update\" >\n                {`${notification.data.name}'s phone number was just updated to ${notification.data.number}.`}\n            </div>\n        )\n    } else if (notification.type === 'PERSON_DOES_NOT_EXIST') {\n        return(\n            <div className=\"notification delete\" >\n                {`${notification.data.name} does not exist in the server.`}\n            </div>\n        )\n    }\n    return null\n}\nexport default Notification","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport FilteredContacts from './helperFunctions/filteredContacts'\nimport AddPersonForm from './components/AddPersonForm';\nimport personHttp from './httpMethods/personHttpMethods';\nimport Notification from './components/Notification'; \nimport './index.css'\n\nconst App = () => {\n    //------------------------ APPLICATION STATE -------------------------//\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchQuery, setSearchQuery] = useState('')\n    const [persons, setPersons] = useState([])\n    const [notification, setNotification] = useState({})\n \n    //------------------------ SIDE EFFECT HOOKS-------------------------//\n    useEffect(() => {\n            personHttp\n                .getAllPeople()\n                .then(people => setPersons(people))\n    }, [])\n        //------------------------ EVENT HANDLERS -------------------------//\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handlePersonSearch = (event) => {\n        setSearchQuery(event.target.value)\n    }\n\n    const handlePersonDeletion = (personToDelete) => {\n        personHttp.deletePerson(personToDelete)\n        setPersons(\n            persons.filter(person => person.id !== personToDelete.id)\n        )\n        handleNotificationUpdate(personToDelete, 'DELETE_PERSON')\n    }\n\n    const handleNotificationUpdate = (person, type) => {\n        setNotification({\n            data: {...person},\n            type: type\n        })\n        setTimeout(() => setNotification({}), 5000)\n    }\n\n    const clearInputFields = () => {\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const addNewPerson = (event) => {\n        event.preventDefault()\n        const MESSAGE = `${newName} is already in the phonebook!  Replace the old number with the new one?`\n        \n        const duplicatePerson = persons.filter(person => person.name === newName)\n\n        if (duplicatePerson.length > 0) {\n            const replaceContact = window.confirm(MESSAGE)\n            const matchingPerson = duplicatePerson[0]\n            \n            const personToUpdate = {\n                ...matchingPerson,\n                number: newNumber\n            }\n\n            if (replaceContact) {\n                // make http PUT request to update phone number\n                personHttp\n                    .updatePerson(personToUpdate)\n                    .then(updatedPerson => {\n                        setPersons(\n                            persons\n                                .filter(person => person.id !== updatedPerson.id)\n                                .concat(personToUpdate)\n                        )\n                        clearInputFields()\n                    })\n                    .catch(error => {\n                        handleNotificationUpdate(personToUpdate, 'PERSON_DOES_NOT_EXIST')\n                        setPersons(\n                            persons.filter(p => p.id !== personToUpdate.id)\n                        )\n                    })\n                    handleNotificationUpdate(personToUpdate, 'UPDATE_PERSON')\n                    clearInputFields()\n            } else {\n                clearInputFields()\n                return\n            }\n        }\n        else {\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            }\n            personHttp\n                .createPerson(newPerson)\n                .then(newPerson => {\n                    setPersons([\n                        ...persons,\n                        newPerson\n                    ])\n                .catch(error => {\n                    console.log(error)\n                })\n            })\n            clearInputFields()\n            handleNotificationUpdate(newPerson, 'NEW_PERSON')\n        }\n    }\n    return(\n        <div>\n            <h1>\n                Phonebook App\n            </h1>\n            < Notification \n                notification={notification} \n            />\n            <h2>\n                Search for a Person\n                <input \n                    type=\"text\"\n                    onChange={handlePersonSearch}\n                    value={searchQuery}\n                />\n            </h2>\n            <h2>Add a New Person</h2>\n            \n            < AddPersonForm \n                addNewPerson={addNewPerson}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n\n            />\n\n            <h2>People...</h2>\n            <ul>\n                < FilteredContacts \n                    persons={persons} \n                    searchQuery={searchQuery} \n                    handlePersonDeletion={handlePersonDeletion}\n                />\n            </ul>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}