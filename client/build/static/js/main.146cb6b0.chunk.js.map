{"version":3,"sources":["components/Person.js","helperFunctions/isPhonebookMatch.js","helperFunctions/filteredContacts.js","components/AddPersonForm.js","httpMethods/personHttpMethods.js","components/Notification.js","index.js"],"names":["Person","_ref","person","handlePersonDeletion","react_default","a","createElement","className","key","name","number","onClick","isPhonebookMatch","searchQuery","toLowerCase","i","length","charAt","FilteredContacts","persons","map","components_Person","uuid","AddPersonForm","addNewPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","value","onChange","placeholder","URL","personHttpMethods","axios","get","concat","then","response","data","newPerson","post","personToDelete","delete","id","personToUpdate","put","Notification","notification","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setNewName","_useState3","_useState4","setNewNumber","_useState5","_useState6","setSearchQuery","_useState7","_useState8","setPersons","_useState9","_useState10","setNotification","useEffect","personHttp","people","handleNotificationUpdate","objectSpread","setTimeout","clearInputFields","src_components_Notification","event","target","components_AddPersonForm","preventDefault","MESSAGE","duplicatePerson","filter","replaceContact","window","confirm","duplicate","console","log","updatedPerson","catch","error","savedPerson","toConsumableArray","filteredContacts","document","getElementById"],"mappings":"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","file":"static/js/main.146cb6b0.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, handlePersonDeletion }) => {\n    return(\n        <div>\n            <li className=\"person\" key={person.name}> \n                {person.name} : {person.number} \n            </li>\n            <button onClick={handlePersonDeletion}>\n                    Delete Contact\n            </button>\n        </div>\n    )\n\n}\n\nexport default Person","const isPhonebookMatch = (name, searchQuery) => {\n    name = name.toLowerCase()\n    searchQuery = searchQuery.toLowerCase()\n\n    for (let i = 0; i < searchQuery.length; i++) {\n        if (searchQuery.charAt(i) === name.charAt(i)) {\n            // corresponding characters match!\n        } \n        else {\n            // corresponding characters don't match!\n            return false\n        }\n    }\n    return true\n}\n\nexport default isPhonebookMatch","import React from 'react'\nimport Person from '../components/Person'\nimport isPhonebookMatch from './isPhonebookMatch'\nimport uuid from 'uuid'\n\nconst FilteredContacts = ({persons, searchQuery, handlePersonDeletion}) => {\n    return(\n        persons.map((person) => {\n            if (searchQuery) {\n                if (isPhonebookMatch(person.name, searchQuery)) {\n                    return(\n                        <Person \n                            key={person.name}\n                            person={person}\n                            handlePersonDeletion={() => handlePersonDeletion(person)}\n                        />\n                    )\n                } else {\n                        return undefined\n                }\n            }\n            else {\n            // no search in progress\n                return(\n                    < Person \n                        key={uuid()}\n                        person={person}\n                        handlePersonDeletion= {() => handlePersonDeletion(person)} \n                    />)\n            }\n        })\n    )\n}\n    \nexport default FilteredContacts","import React from 'react'\n\nconst AddPersonForm = (\n    {\n        addNewPerson,\n        newName,\n        handleNameChange,\n        newNumber,\n        handleNumberChange,\n    }\n    ) => (\n    \n    <form onSubmit={addNewPerson}>\n        <div>\n            Name: \n            <input \n                type=\"text\"\n                value={newName}\n                onChange={handleNameChange} \n                placeholder=\"Type name here...\"\n            />\n        </div>\n        <div>\n            Number: \n            <input \n                type=\"text\"\n                value={newNumber}\n                onChange={handleNumberChange}\n                placeholder=\"Type phone number here...\"\n            />\n        </div>\n        <div>\n            <button type=\"submit\">\n                    add\n            </button>\n        </div>\n    </form>\n)\n\nexport default AddPersonForm\n","import axios from 'axios'\nconst URL = 'http://localhost:5000/api/persons'\n\nconst getAllPeople = () => {\n    const request = axios.get(`${URL}`)\n    return request.then(response => response.data)\n}\n\nconst createPerson = (newPerson) => {\n    const request = axios.post(`${URL}`, newPerson)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = (personToDelete) => {\n    const request = axios.delete(`${URL}/${personToDelete.id}`)\n    return request.then(response => response.data)\n}\n\nconst updatePerson = (personToUpdate) => {\n    const request = axios.put(`${URL}/${personToUpdate.id}`, personToUpdate)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAllPeople: getAllPeople,\n    createPerson: createPerson,\n    deletePerson: deletePerson,\n    updatePerson: updatePerson\n}","import React from 'react'\nimport './Notification.css'\n\nconst Notification = ({ notification }) => {\n\n    if (notification.type === 'NEW_PERSON') {\n        return(\n            <div className=\"notification add\" >\n                {`${notification.data.name} was just added!`}\n            </div>\n        )\n    } else if (notification.type === 'DELETE_PERSON') {\n        return(\n            <div className=\"notification delete\" >\n                {`${notification.data.name} was just deleted.`}\n            </div>\n        )\n    } else if (notification.type === 'UPDATE_PERSON') {\n        return(\n            <div className=\"notification update\" >\n                {`${notification.data.name}'s phone number was just updated to ${notification.data.number}.`}\n            </div>\n        )\n    } else if (notification.type === 'PERSON_DOES_NOT_EXIST') {\n        return(\n            <div className=\"notification delete\" >\n                {`${notification.data.name} does not exist in the server.`}\n            </div>\n        )\n    }\n    return null\n}\nexport default Notification","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport FilteredContacts from './helperFunctions/filteredContacts'\nimport AddPersonForm from './components/AddPersonForm';\nimport personHttp from './httpMethods/personHttpMethods';\nimport Notification from './components/Notification'; \nimport './index.css'\n\nconst App = () => {\n    //------------------------ APPLICATION STATE -------------------------//\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchQuery, setSearchQuery] = useState('')\n    const [persons, setPersons] = useState([])\n    const [notification, setNotification] = useState({})\n \n    //------------------------ SIDE EFFECT HOOKS-------------------------//\n    useEffect(() => {\n            personHttp\n                .getAllPeople()\n                .then(people => setPersons(people))\n    }, [])\n    //------------------------ EVENT HANDLERS ----------------------------//\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handlePersonSearch = (event) => {\n        setSearchQuery(event.target.value)\n    }\n\n    const handlePersonDeletion = (personToDelete) => {\n        personHttp.deletePerson(personToDelete)\n        setPersons(persons.filter(person => person.id !== personToDelete.id))\n        handleNotificationUpdate(personToDelete, 'DELETE_PERSON')\n    }\n\n    const handleNotificationUpdate = (person, type) => {\n        setNotification({\n            data: {...person},\n            type: type\n        })\n        setTimeout(() => setNotification({}), 5000)\n    }\n\n    const clearInputFields = () => {\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const addNewPerson = (event) => {\n        event.preventDefault()\n        const MESSAGE = `${newName} is already in the phonebook!  Replace the old number with the new one?`\n        \n        const duplicatePerson = persons.filter(person => person.name === newName)\n\n        if (duplicatePerson.length > 0) {\n            const replaceContact = window.confirm(MESSAGE)\n            const duplicate = duplicatePerson[0]\n            \n            const personToUpdate = {\n                ...duplicate,\n                number: newNumber\n            }\n            if (replaceContact) {\n                console.log('person to update before PUT request', personToUpdate)\n                // make http PUT request to update phone number\n                personHttp\n                    .updatePerson(personToUpdate)\n                    .then(updatedPerson => {\n                        console.log('updated person after PUT request', updatedPerson)\n                        // make a copy of the new state with phone number updated\n                        setPersons(\n                            persons\n                                .filter(person => person.id !== updatedPerson.id)\n                                .concat(personToUpdate)\n                        )\n                        handleNotificationUpdate(personToUpdate, 'UPDATE_PERSON')\n                        clearInputFields()\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    })\n            } else {\n                clearInputFields()\n                return\n            }\n        }\n        else {\n            const newPerson = {\n                name: newName,\n                number: newNumber\n            }\n            personHttp\n                .createPerson(newPerson)\n                .then(savedPerson => {\n                    setPersons([\n                        ...persons,\n                        newPerson\n                    ])\n                    handleNotificationUpdate(newPerson, 'NEW_PERSON')\n                    clearInputFields()\n                })\n                .catch(error => {\n                    console.log('There was an error createing a new person: ', error)\n                })\n        }\n    }\n    \n    return(\n        <div>\n            <h1>\n                Phonebook App\n            </h1>\n            <Notification \n                notification={notification} \n            />\n            <h2>\n                Search for a Person\n                <input \n                    type=\"text\"\n                    onChange={handlePersonSearch}\n                    value={searchQuery}\n                />\n            </h2>\n            <h2>Add a New Person</h2>\n                < AddPersonForm \n                    addNewPerson={addNewPerson}\n                    newName={newName}\n                    handleNameChange={handleNameChange}\n                    newNumber={newNumber}\n                    handleNumberChange={handleNumberChange}\n                />\n            <h2>People...</h2>\n            <ul>\n                < FilteredContacts \n                    persons={persons} \n                    searchQuery={searchQuery} \n                    handlePersonDeletion={handlePersonDeletion}\n                />\n            </ul>\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}